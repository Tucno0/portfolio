---

---

<div id="scroll-to-top" class="scroll-to-top bottom-4 right-4">
  <svg class="progress-circle" width="40" height="40" viewBox="0 0 40 40">
    <circle
      class="progress-circle-bg"
      cx="20"
      cy="20"
      r="16"
      fill="none"
      stroke="#e6e6e6"
      stroke-width="3">
    </circle>

    <circle
      class="progress-circle-path"
      cx="20"
      cy="20"
      r="16"
      fill="none"
      stroke="#4263EB"
      stroke-width="3"
      stroke-dasharray="100.53"
      stroke-dashoffset="100.53">
    </circle>
  </svg>
  
  <span class="arrow">↑</span>
</div>

<style>
  .scroll-to-top {
    position: fixed;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .scroll-to-top.visible {
    opacity: 1;
    visibility: visible;
  }

  .scroll-to-top:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 15px rgba(66, 99, 235, 0.2);
    background: #f8f9ff;
  }

  .progress-circle {
    position: absolute;
    transform: rotate(-90deg);
    transition: transform 0.3s ease;
  }

  .scroll-to-top:hover .progress-circle {
    transform: rotate(-90deg) scale(0.95);
  }

  .progress-circle-bg {
    stroke-linecap: round;
  }

  .progress-circle-path {
    stroke-linecap: round;
    transition:
      stroke-dashoffset 0.1s,
      stroke 0.3s ease;
  }

  .scroll-to-top:hover .progress-circle-path {
    stroke: #2d4bed; /* Un tono más oscuro al hacer hover */
  }

  .arrow {
    color: #4263eb;
    font-size: 1.25rem;
    z-index: 1;
    transition: all 0.3s ease;
    display: block;
  }

  .scroll-to-top:hover .arrow {
    transform: translateY(-2px);
    color: #2d4bed;
    animation: bounce 1s ease infinite;
  }

  @keyframes bounce {
    0%,
    100% {
      transform: translateY(-2px);
    }
    50% {
      transform: translateY(2px);
    }
  }
</style>

<script>
  const scrollToTop = document.getElementById(
    "scroll-to-top"
  ) as HTMLDivElement;
  
  const progressPath = document.querySelector(
    ".progress-circle-path"
  ) as SVGCircleElement;

  const pathLength = progressPath?.getTotalLength() || 100.53;

  if (progressPath) {
    progressPath.style.strokeDasharray = `${pathLength}`;
    progressPath.style.strokeDashoffset = `${pathLength}`;
  }

  function updateProgress() {
    const scrollHeight =
      document.documentElement.scrollHeight - window.innerHeight;
    const scrolled = window.scrollY || document.documentElement.scrollTop;
    const scrollPercentage = scrolled / scrollHeight;

    if (progressPath && scrollToTop) {
      const offset = pathLength - scrollPercentage * pathLength;
      progressPath.style.strokeDashoffset = `${offset}`;

      if (scrolled > 100) {
        scrollToTop.classList.add("visible");
      } else {
        scrollToTop.classList.remove("visible");
      }
    }
  }

  if (scrollToTop) {
    scrollToTop.addEventListener("click", () => {
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    });
  }

  window.addEventListener("scroll", updateProgress);
  window.addEventListener("resize", updateProgress);
</script>
